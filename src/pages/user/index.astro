---
import { getCollection } from "astro:content"
import type { Path } from "~/components/Nav.astro"
import UserRef from "~/components/UserRef.astro"
import Layout from "~/layout/Layout.astro"

const collection = await getCollection("contests")
const participants = [
  ...new Set(collection.flatMap(({ data: { participants } }) => participants)),
]
participants.sort()

const path = [
  {
    name: "홈",
    url: "/",
  },
  {
    name: "참가자",
    url: Astro.url.pathname,
  },
] satisfies Path
---

<Layout title="참가자 검색" path={path}>
  <span slot="header-title" class="px-4">참가자 검색</span>
  <main
    class="w-full my-4 lg:max-w-6xl md:max-w-4xl grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 px-4 flex flex-col items-stretch"
  >
    <input
      type="text"
      placeholder="검색..."
      class="text-center flex h-10 rounded-md b b-border dark:bg-dark-9 px-3 py-2 text-sm ring-offset-white dark:ring-offset-dark-9 placeholder:text-muted focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-white focus-visible:ring-offset-2"
    />
    <div
      id="hit"
      class="flex flex-col items-stretch [&>div:not(:last-child)]:b-b [&>div]:b-border [&>div]:p-2 [&>div]:transition [&>div]:transition-property-[background-color] hover:[&>div]:bg-light-3 hover:dark:[&>div]:bg-dark-6 [&_a]:transition-transform [&_a:hover]:translate-y-[-0.25rem]"
    >
    </div>
    <div id="hidden" class="hidden">
      {
        participants.map((name) => (
          <div class="grid grid-cols-1 text-center">
            <UserRef handle={name} />
          </div>
        ))
      }
    </div>
  </main>
</Layout>
<script>
  import { navigate } from "astro:transitions/client"
  import Fuse from "fuse.js"
  const hit = document.getElementById("hit")!
  const hidden = document.getElementById("hidden")!
  const participants = [...hidden.children]
  hidden.replaceChildren()
  const fuse = new Fuse(
    participants.map((element) => (element as HTMLElement).innerText),
    {},
  )
  const search = document.getElementsByTagName("input")[0] as HTMLInputElement
  const searchParams = new URLSearchParams(location.hash.slice(1))
  const q = searchParams.get("q")
  if (q != null) {
    search.value = q
    query(q)
  }
  search.addEventListener("input", (e) => {
    const q = (e.currentTarget as HTMLInputElement).value
    searchParams.set("q", q)
    navigate(`#${searchParams.toString()}`)
    query(q)
  })
  function query(text: string) {
    hit.replaceChildren()
    hidden.replaceChildren()
    const result = fuse.search(text)
    if (result.length > 10) result.length = 10
    hit.replaceChildren(...result.map(({ refIndex }) => participants[refIndex]))
  }
</script>
